import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const postSlice = createSlice({
  name: "posts",
  initialState: {
    currentPost: null,
    items: [],
    loading: false,
  },
  reducers: {
    setPost: (state, action) => {
      state.currentPost = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPosts.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchPosts.fulfilled, (state, action) => {
        debugger;
        state.items = action.payload;
        state.loading = false;
      });
  },
});

export const fetchPosts = createAsyncThunk("posts/fetch", async () => {
  const res = await fetch("http://localhost:3000/api/posts");
  return await res.json();
});

export const { setPost } = postSlice.actions;
export default postSlice.reducer;

/**
 * createSlice is a utility from Redux Toolkit that automatically generates action creators and reducers for you.
 * A slice represents a specific piece of the Redux state and the reducers (functions) that update that piece of state.
 */

/**
 * postSlice.actions
 * This object contains all the action creators automatically generated by "createSlice"
 * Each key in this object corresponds to one of the reducer functions you defined.
 * "setPost" is an "action creator" that you can dispatch to update the state
 */

/**
 * When you use createAsyncThunk('post/fetchPost', ...), Redux Toolkit automatically generates 3 action types:
 * 1. fetchPost.pending â†’ dispatched when the async function starts
 * 2. fetchPost.fulfilled â†’ dispatched when it resolves successfully.
 * 3. fetchPost.rejected â†’ dispatched if it throws an error.
 *
 * The extraReducers lets you handle those 3 action types in your sliceâ€™s reducer logic:
 *
 * ðŸ§  Why use extraReducers?
 * You can't list async actions like fetchPost inside the regular reducers field because they're not "local" reducers â€” theyâ€™re created outside the slice.
 * extraReducers gives you a structured way to handle those external or async-generated actions.
 */
